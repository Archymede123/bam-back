type AggregateTrack {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createTrack(data: TrackCreateInput!): Track!
  updateTrack(data: TrackUpdateInput!, where: TrackWhereUniqueInput!): Track
  updateManyTracks(data: TrackUpdateManyMutationInput!, where: TrackWhereInput): BatchPayload!
  upsertTrack(where: TrackWhereUniqueInput!, create: TrackCreateInput!, update: TrackUpdateInput!): Track!
  deleteTrack(where: TrackWhereUniqueInput!): Track
  deleteManyTracks(where: TrackWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  track(where: TrackWhereUniqueInput!): Track
  tracks(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Track]!
  tracksConnection(where: TrackWhereInput, orderBy: TrackOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TrackConnection!
  node(id: ID!): Node
}

type Subscription {
  track(where: TrackSubscriptionWhereInput): TrackSubscriptionPayload
}

type Track {
  id: ID!
  fullName: String!
  track: String!
  artist: String!
  record: String
  cover: String
  artistCover: String
  updatedAt: DateTime!
}

type TrackConnection {
  pageInfo: PageInfo!
  edges: [TrackEdge]!
  aggregate: AggregateTrack!
}

input TrackCreateInput {
  id: ID
  fullName: String!
  track: String!
  artist: String!
  record: String
  cover: String
  artistCover: String
}

type TrackEdge {
  node: Track!
  cursor: String!
}

enum TrackOrderByInput {
  id_ASC
  id_DESC
  fullName_ASC
  fullName_DESC
  track_ASC
  track_DESC
  artist_ASC
  artist_DESC
  record_ASC
  record_DESC
  cover_ASC
  cover_DESC
  artistCover_ASC
  artistCover_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TrackPreviousValues {
  id: ID!
  fullName: String!
  track: String!
  artist: String!
  record: String
  cover: String
  artistCover: String
  updatedAt: DateTime!
}

type TrackSubscriptionPayload {
  mutation: MutationType!
  node: Track
  updatedFields: [String!]
  previousValues: TrackPreviousValues
}

input TrackSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TrackWhereInput
  AND: [TrackSubscriptionWhereInput!]
  OR: [TrackSubscriptionWhereInput!]
  NOT: [TrackSubscriptionWhereInput!]
}

input TrackUpdateInput {
  fullName: String
  track: String
  artist: String
  record: String
  cover: String
  artistCover: String
}

input TrackUpdateManyMutationInput {
  fullName: String
  track: String
  artist: String
  record: String
  cover: String
  artistCover: String
}

input TrackWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  fullName: String
  fullName_not: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_lt: String
  fullName_lte: String
  fullName_gt: String
  fullName_gte: String
  fullName_contains: String
  fullName_not_contains: String
  fullName_starts_with: String
  fullName_not_starts_with: String
  fullName_ends_with: String
  fullName_not_ends_with: String
  track: String
  track_not: String
  track_in: [String!]
  track_not_in: [String!]
  track_lt: String
  track_lte: String
  track_gt: String
  track_gte: String
  track_contains: String
  track_not_contains: String
  track_starts_with: String
  track_not_starts_with: String
  track_ends_with: String
  track_not_ends_with: String
  artist: String
  artist_not: String
  artist_in: [String!]
  artist_not_in: [String!]
  artist_lt: String
  artist_lte: String
  artist_gt: String
  artist_gte: String
  artist_contains: String
  artist_not_contains: String
  artist_starts_with: String
  artist_not_starts_with: String
  artist_ends_with: String
  artist_not_ends_with: String
  record: String
  record_not: String
  record_in: [String!]
  record_not_in: [String!]
  record_lt: String
  record_lte: String
  record_gt: String
  record_gte: String
  record_contains: String
  record_not_contains: String
  record_starts_with: String
  record_not_starts_with: String
  record_ends_with: String
  record_not_ends_with: String
  cover: String
  cover_not: String
  cover_in: [String!]
  cover_not_in: [String!]
  cover_lt: String
  cover_lte: String
  cover_gt: String
  cover_gte: String
  cover_contains: String
  cover_not_contains: String
  cover_starts_with: String
  cover_not_starts_with: String
  cover_ends_with: String
  cover_not_ends_with: String
  artistCover: String
  artistCover_not: String
  artistCover_in: [String!]
  artistCover_not_in: [String!]
  artistCover_lt: String
  artistCover_lte: String
  artistCover_gt: String
  artistCover_gte: String
  artistCover_contains: String
  artistCover_not_contains: String
  artistCover_starts_with: String
  artistCover_not_starts_with: String
  artistCover_ends_with: String
  artistCover_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TrackWhereInput!]
  OR: [TrackWhereInput!]
  NOT: [TrackWhereInput!]
}

input TrackWhereUniqueInput {
  id: ID
  fullName: String
}
